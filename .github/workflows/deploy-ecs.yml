# .github/workflows/deploy-ecs.yml

name: Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'hello-world/**'

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: hello-world-app
  ECS_CLUSTER: ecs-hello-world-cluster
  ECS_SERVICE: hello-world-service
  ECS_TASK_DEFINITION_FAMILY: hello-world-task # Use the Family name, not the full ARN

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecs-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./hello-world # Make sure to specify the context here
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # --- This step will now handle both rendering and registering ---
      - name: Render and Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1 # <--- Using this action
        with:
          task-definition: | # <--- Pass the task definition JSON directly or via file
            # Fetch the current active Task Definition (latest revision) from ECS
            # and update the image dynamically using 'jq'.
            # Ensure 'hello-world-container' matches the name in your actual task definition in Terraform
            $(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
              --query taskDefinition --output json | \
              jq '.containerDefinitions[0].image = "${{ steps.build-image.outputs.image }}"')
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          # Optional: You can specify a wait-for-service-stability parameter here if needed, default is true
