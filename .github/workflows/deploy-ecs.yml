# .github/workflows/deploy-ecs.yml

name: Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'hello-world/**'

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: hello-world-app
  ECS_CLUSTER: ecs-hello-world-cluster
  ECS_SERVICE: hello-world-service
  ECS_TASK_DEFINITION_FAMILY: hello-world-task

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecs-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./hello-world
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # --- MODIFIED STEP: Now just render the task definition and save to file ---
      - name: Describe and Render Task Definition
        id: render-task-definition
        run: |
          # Fetch the current active Task Definition (latest revision) from ECS
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
            --query taskDefinition --output json)

          # Update the image in the downloaded Task Definition JSON
          # Ensure 'hello-world-container' matches the name in your actual task definition in Terraform
          UPDATED_TASK_DEF_JSON=$(echo "$TASK_DEF_JSON" | \
            jq '.containerDefinitions[0].image = "${{ steps.build-image.outputs.image }}"')

          # Remove unwanted fields that can cause conflicts when registering a new definition
          # These fields are typically generated by AWS and should not be passed back
          CLEANED_TASK_DEF_JSON=$(echo "$UPDATED_TASK_DEF_JSON" | \
            jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.compatibilities)')

          # Save the cleaned and updated JSON to a file
          echo "$CLEANED_TASK_DEF_JSON" > new-task-definition.json
          
          # Output the path to the updated task definition for the next step
          echo "task-definition-path=new-task-definition.json" >> $GITHUB_OUTPUT

      # --- MODIFIED STEP: Now deploy using the generated file ---
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          # Pass the path to the JSON file generated in the previous step
          task-definition: ${{ steps.render-task-definition.outputs.task-definition-path }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          # Optional: You can specify a wait-for-service-stability parameter here if needed, default is true
