# .github/workflows/deploy-ecs.yml

name: Deploy to ECS

on:
  push:
    branches:
      - main
    paths:
      - 'hello-world/**'
      - '.github/workflows/deploy-ecs.yml'

env:
  AWS_REGION: eu-west-1
  ECR_REPOSITORY: hello-world-app
  ECS_CLUSTER: ecs-hello-world-cluster
  ECS_SERVICE: hello-world-service
  ECS_TASK_DEFINITION_FAMILY: hello-world-task

jobs:
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecs-deploy-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./hello-world
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Ensure the image output is set correctly for the next step
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT # Set the output for the built image
    outputs:
      # This explicitly declares the outputs of the job, making them available to jobs that "need" this one
      image_uri: ${{ steps.build-image.outputs.IMAGE_URI }}
      
  deploy-ecs-service:
    name: Deploy ECS Service
    runs-on: ubuntu-latest
    needs: build-and-push-image # This job depends on the successful completion of the 'build-and-push-image' job
    permissions:
      contents: read
      id-token: write # Required for OIDC authentication with AWS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-ecs-deploy-role
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Describe and Render Task Definition
        id: render-task-definition
        run: |
          # Fetch the current active Task Definition (latest revision) from ECS
          TASK_DEF_JSON=$(aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION_FAMILY }} \
            --query taskDefinition --output json)
          
          echo "--- Original Task Definition JSON from ECS ---"
          echo "$TASK_DEF_JSON"
          echo "----------------------------------------------"

          # Get the image URI from the build step's output
          BUILT_IMAGE_URI="${{ steps.build-image.outputs.image }}"
          echo "Built Image URI: $BUILT_IMAGE_URI"

          # Update the image in the downloaded Task Definition JSON
          # Ensure 'hello-world-container' matches the name in your actual task definition in Terraform
          # This command selects the specific container by name and updates its image field.
          UPDATED_TASK_DEF_JSON=$(echo "$TASK_DEF_JSON" | \
            jq --arg img "$BUILT_IMAGE_URI" \
            '.containerDefinitions |= map(if .name == "hello-world-container" then .image = $img else . end)')

          echo "--- Updated Task Definition JSON (before cleaning) ---"
          echo "$UPDATED_TASK_DEF_JSON"
          echo "----------------------------------------------------"

          # Remove unwanted fields that can cause conflicts when registering a new definition
          # These fields are typically generated by AWS and should not be passed back
          CLEANED_TASK_DEF_JSON=$(echo "$UPDATED_TASK_DEF_JSON" | \
            jq 'del(.taskDefinitionArn) | del(.revision) | del(.status) | del(.compatibilities) | del(.registeredAt) | del(.registeredBy)') # Added more 'del' for robustness

          echo "--- Cleaned Task Definition JSON (ready for registration) ---"
          echo "$CLEANED_TASK_DEF_JSON"
          echo "----------------------------------------------------"

          # Save the cleaned and updated JSON to a file
          echo "$CLEANED_TASK_DEF_JSON" > new-task-definition.json
          
          # Output the path to the updated task definition for the next step
          echo "task-definition-path=new-task-definition.json" >> $GITHUB_OUTPUT

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-definition.outputs.task-definition-path }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
